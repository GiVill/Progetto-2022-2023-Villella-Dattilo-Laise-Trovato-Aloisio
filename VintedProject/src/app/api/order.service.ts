/**
 * OpenAPi Vinted
 * OpenApi documentation for Spring Security
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { OrderDto } from '../model/orderDto';
import { PageOrderDto } from '../model/pageOrderDto';
import { ServiceError } from '../model/serviceError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {CookiesService} from "./cookies.service";


@Injectable()
export class OrderService {

    protected basePath = 'https://localhost:8010/vintedProject-api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, private CookiesService: CookiesService, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminAddOrder(body: OrderDto, observe?: 'body', reportProgress?: boolean): Observable<OrderDto>;
    public adminAddOrder(body: OrderDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderDto>>;
    public adminAddOrder(body: OrderDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderDto>>;
    public adminAddOrder(body: OrderDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling adminAddOrder.');
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<OrderDto>('post',`${this.basePath}/v1/admin/orders`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrder(body: OrderDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrder(body: OrderDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrder(body: OrderDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrder(body: OrderDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling deleteOrder.');
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('delete',`${this.basePath}/v1/orders`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param orderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrderById(orderId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteOrderById(orderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteOrderById(orderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteOrderById(orderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling deleteOrderById.');
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/v1/admin/orders/${encodeURIComponent(String(orderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAll1(page: number, observe?: 'body', reportProgress?: boolean): Observable<PageOrderDto>;
    public getAll1(page: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageOrderDto>>;
    public getAll1(page: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageOrderDto>>;
    public getAll1(page: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getAll1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageOrderDto>('get',`${this.basePath}/v1/admin/orders`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param orderId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrderDtoById(orderId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderDto>;
    public getOrderDtoById(orderId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderDto>>;
    public getOrderDtoById(orderId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderDto>>;
    public getOrderDtoById(orderId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getOrderDtoById.');
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<OrderDto>('get',`${this.basePath}/v1/orders/${encodeURIComponent(String(orderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userEmail
     * @param page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrderDtoByIdByEmailPagedAdmin(userEmail: string, page: number, observe?: 'body', reportProgress?: boolean): Observable<PageOrderDto>;
    public getOrderDtoByIdByEmailPagedAdmin(userEmail: string, page: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageOrderDto>>;
    public getOrderDtoByIdByEmailPagedAdmin(userEmail: string, page: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageOrderDto>>;
    public getOrderDtoByIdByEmailPagedAdmin(userEmail: string, page: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userEmail === null || userEmail === undefined) {
            throw new Error('Required parameter userEmail was null or undefined when calling getOrderDtoByIdByEmailPagedAdmin.');
        }

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getOrderDtoByIdByEmailPagedAdmin.');
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageOrderDto>('get',`${this.basePath}/v1/admin/orders/email/${encodeURIComponent(String(userEmail))}/${encodeURIComponent(String(page))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userId
     * @param page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrderDtoByIdPagedAdmin(userId: number, page: number, observe?: 'body', reportProgress?: boolean): Observable<PageOrderDto>;
    public getOrderDtoByIdPagedAdmin(userId: number, page: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageOrderDto>>;
    public getOrderDtoByIdPagedAdmin(userId: number, page: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageOrderDto>>;
    public getOrderDtoByIdPagedAdmin(userId: number, page: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getOrderDtoByIdPagedAdmin.');
        }

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getOrderDtoByIdPagedAdmin.');
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageOrderDto>('get',`${this.basePath}/v1/admin/orders/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(page))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserOrders(page: number, observe?: 'body', reportProgress?: boolean): Observable<PageOrderDto>;
    public getUserOrders(page: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageOrderDto>>;
    public getUserOrders(page: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageOrderDto>>;
    public getUserOrders(page: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getUserOrders.');
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageOrderDto>('get',`${this.basePath}/v1/orders/user/${encodeURIComponent(String(page))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param userId
     * @param page
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserOrders1(userId: number, page: number, observe?: 'body', reportProgress?: boolean): Observable<PageOrderDto>;
    public getUserOrders1(userId: number, page: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageOrderDto>>;
    public getUserOrders1(userId: number, page: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageOrderDto>>;
    public getUserOrders1(userId: number, page: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserOrders1.');
        }

        if (page === null || page === undefined) {
            throw new Error('Required parameter page was null or undefined when calling getUserOrders1.');
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }


        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PageOrderDto>('get',`${this.basePath}/v1/admin/orders/user/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(page))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userAddOrder(body: OrderDto, observe?: 'body', reportProgress?: boolean): Observable<OrderDto>;
    public userAddOrder(body: OrderDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderDto>>;
    public userAddOrder(body: OrderDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderDto>>;
    public userAddOrder(body: OrderDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling userAddOrder.');
        }

        let headers = this.defaultHeaders;

      // authentication (bearerAuth) required
      if (this.CookiesService.getTokent()) {
        const accessToken = typeof this.configuration.accessToken === 'function'
          ? this.CookiesService.getTokent()
          : this.CookiesService.getTokent();
        headers = headers.set('Authorization', 'Bearer ' + accessToken);
      }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<OrderDto>('post',`${this.basePath}/v1/orders`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
