/**
 * OpenAPi Vinted
 * OpenApi documentation for Spring Security
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.example.vintedandroid.swagger.client.apis

import android.util.Log
import com.example.vintedandroid.swagger.client.infrastructure.ApiClient
import com.example.vintedandroid.swagger.client.infrastructure.ClientError
import com.example.vintedandroid.swagger.client.infrastructure.ClientException
import com.example.vintedandroid.swagger.client.infrastructure.RequestConfig
import com.example.vintedandroid.swagger.client.infrastructure.RequestMethod
import com.example.vintedandroid.swagger.client.infrastructure.ResponseType
import com.example.vintedandroid.swagger.client.infrastructure.ServerError
import com.example.vintedandroid.swagger.client.infrastructure.ServerException
import com.example.vintedandroid.swagger.client.infrastructure.Success
import com.example.vintedandroid.swagger.client.models.ChatMessage
import com.example.vintedandroid.swagger.client.models.NewMessageDto

import com.example.vintedandroid.swagger.client.infrastructure.*
import kotlinx.coroutines.flow.Flow

class ChatMessageApi(basePath: String = "https://192.168.1.90:8010/vintedProject-api") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param chatId  
     * @return kotlin.Array<ChatMessage>
     */
    @Suppress("UNCHECKED_CAST")
    fun allChatMessage(chatId: String?): Array<ChatMessage> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/chat/message/{chatId}".replace("{" + "chatId" + "}", "$chatId")
        )

        ConfigureAuthorizationBearer(localVariableConfig)
        val response = request<kotlin.Array<ChatMessage>>(
                localVariableConfig,
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Array<ChatMessage>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     *
     *
     * @param body
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun insertMessage(body: NewMessageDto): Int {
        val localVariableBody: kotlin.Any? = body
        var localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v1/message/insert"
        )

        val response = request<kotlin.String>(
                localVariableConfig, localVariableBody
        )


        return when (response.responseType) {
            ResponseType.Success -> TODO()
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
