/**
 * OpenAPi Vinted
 * OpenApi documentation for Spring Security
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.example.vintedandroid.client.apis

import com.example.vintedandroid.client.infrastructure.ApiClient
import com.example.vintedandroid.client.infrastructure.ClientError
import com.example.vintedandroid.client.infrastructure.ClientException
import com.example.vintedandroid.client.infrastructure.RequestConfig
import com.example.vintedandroid.client.infrastructure.RequestMethod
import com.example.vintedandroid.client.infrastructure.ResponseType
import com.example.vintedandroid.client.infrastructure.ServerError
import com.example.vintedandroid.client.infrastructure.ServerException
import com.example.vintedandroid.client.infrastructure.Success
import com.example.vintedandroid.client.models.PagePaymentDto
import com.example.vintedandroid.client.models.PaymentDto

import com.example.vintedandroid.client.infrastructure.*

class PaymentApi(basePath: kotlin.String = "https://192.168.1.90:8010/vintedProject-api") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param body  
     * @return PaymentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun addPayment(body: PaymentDto): PaymentDto {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/v1/payments"
        )
        val response = request<PaymentDto>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaymentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @return kotlin.Array<PaymentDto>
     */
    @Suppress("UNCHECKED_CAST")
    fun all1(): kotlin.Array<PaymentDto> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/payments"
        )
        val response = request<kotlin.Array<PaymentDto>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<PaymentDto>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param idPayment  
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun deleteOffer(idPayment: kotlin.Long): kotlin.String {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/v1/payments/{idPayment}".replace("{" + "idPayment" + "}", "$idPayment")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param userId  
     * @param page  
     * @return PagePaymentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getAllPaymentByUser(userId: kotlin.Long, page: kotlin.Int): PagePaymentDto {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/payments/user/{userId}/{page}".replace("{" + "userId" + "}", "$userId").replace("{" + "page" + "}", "$page")
        )
        val response = request<PagePaymentDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PagePaymentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param idPayment  
     * @return PaymentDto
     */
    @Suppress("UNCHECKED_CAST")
    fun getById1(idPayment: kotlin.Long): PaymentDto {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/v1/payments/{idPayment}".replace("{" + "idPayment" + "}", "$idPayment")
        )
        val response = request<PaymentDto>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PaymentDto
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
